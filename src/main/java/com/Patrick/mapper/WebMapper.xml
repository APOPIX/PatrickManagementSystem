<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.Patrick.mapper.WebMapper">
    <!-- 下面的select标签中，"id"与"WebMapper.java"中的方法一一对应，"resultMap"与最后"resultMap"标签中的"id"呈多对一映射关系 -->
    <!--下面的SQL语句实现按照用户名和密码在Staff表中查询元组-->
    <select id="login" resultMap="StaffMap">
      select * from staff where staff_name = "${staff_name}" and staff_password = "${staff_password}";
    </select>
    <!--下面的SQL语句实现查询前十销量的产品-->
    <select id="selectTopTenSalesRanking" resultMap="SalesRankingMap">
        select product_name, turnover from (
        SELECT product_id, sum(total_price) as turnover FROM lexiandb.orders where orders.time_stamp <![CDATA[ >= ]]> "${begin_date}" and  orders.time_stamp  <![CDATA[ <= ]]> "${end_date}" group by orders.product_id )
        as temp left join products on products.id = temp.product_id order by turnover desc limit 10;
    </select>

    <!--下面的SQL语句实现Staff表中插入元组-->
    <select id="register">
    INSERT INTO staff (`role`, `staff_password`, `staff_name`) VALUES (${role_register}, "${staff_password_register}", "${staff_name_register}");
    </select>
    <!--下面的SQL语句实现修改orders中元组实现发货-->
    <select id="deliver">
    UPDATE `lexiandb`.`orders` SET `order_status` = 2 WHERE (`id` = ${id});
    </select>
    <!--下面的SQL语句实现更新orders中元组实现异常处理-->
    <select id="updateOrderInfo">
    UPDATE `lexiandb`.`orders` SET `order_id` = ${order_id_update}, `user_phone` = "${user_phone_update}", `product_id` = ${product_id_update}, `store_id` = ${store_id_update}, `amount` = ${amount_update}, `single_price` = ${single_price_update}, `total_price` =${total_price_update}, `order_status` = ${order_status_update} WHERE (`id` = ${id});
    </select>

    <!--下面的SQL语句实现按照id顺序从staff表中检索所有内容-->
    <select id="selectAllStaffOrderById" resultMap="StaffMap">
    select * from staff order by id asc;
    </select>
    <!--下面的SQL语句实现按照id顺序从users表中检索所有内容-->
    <select id="selectAllUserOrderById" resultMap="UserMap">
    select * from `users` order by id asc;
    </select>
    <!--下面的SQL语句实现按照id从users表中检索元组-->
    <select id="selectUserById" resultMap="UserMap">
    select * from `users` where `id`= ${id} order by id asc;
    </select>

    <!--下面的SQL语句实现按照id从staff表中检索staff-->
    <select id="selectStaffById" resultMap="StaffMap">
    select * from staff where id = ${staff_id};
    </select>

    <!--下面的SQL语句实现按照id从Orders表中检索元组-->
    <select id="selectOrderById" resultMap="OrdersMap">
    select * from orders where id = ${id};
    </select>
    <!--下面的SQL语句实现按照id来更新staff表中staff信息-->
    <select id="updateStaffInfo" resultMap="StaffMap">
    UPDATE staff SET `role` = ${staff_role}, `staff_name` = "${staff_name}", `staff_password` ="${staff_password}"  WHERE (`id` = ${staff_id});
    </select>
    <!--下面的SQL语句实现按照id来删除staff表中元组-->
    <select id="deleteStaffById">
    DELETE FROM `lexiandb`.`staff` WHERE (`id` = ${staff_id});
    </select>

    <!--下面的SQL语句实现按照id从Users表中解封用户-->
    <select id="unbanUser" resultMap="UserMap">
    UPDATE users SET `active` = 1 WHERE (`id` = ${user_id});
    </select>

    <!--下面的SQL语句实现按照id从Users表中封禁用户-->
    <select id="banUser" resultMap="UserMap">
    UPDATE users SET `active` = 0 WHERE (`id` = ${user_id});
    </select>

    <!--下面的SQL语句实现统计所有时间的销量-->
    <select id="salesStatisticsFull" resultMap="salesStatisticsMap">
        select product_id, product_name, store_id, store_name, sales from (
        SELECT product_id, store_id, sum(amount) as sales FROM orders as orders_by_time group by product_id, store_id
        )as raw_result left join products on raw_result.product_id = products.id left join branch_store on raw_result.store_id = branch_store.id
    </select>
    <!--下面的SQL语句实现统计所有时间的浏览量-->
    <select id="browseStatisticsFull" resultMap="browseStatisticsMap">
    SELECT product_id, product_name, store_id, store_name,  browse_num from(
    SELECT product_id,  store_id, count(*) as browse_num FROM browse group by product_id, store_id
    )as raw_result left join products on raw_result.product_id = products.id left join branch_store on store_id = branch_store.id;
    </select>
    <!--下面的SQL语句实现统计某段时间的销量-->
    <select id="salesStatisticsByDateRange" resultMap="salesStatisticsMap">
        select product_id, product_name, store_id, store_name, sales from (
        SELECT product_id, store_id, sum(amount) as sales FROM (
        select * from orders  where orders.time_stamp <![CDATA[ >= ]]> "${begin_date}" and orders.time_stamp  <![CDATA[ <= ]]> "${end_date}"
        )as orders_by_time group by product_id, store_id
        )as raw_result left join products on raw_result.product_id = products.id left join branch_store on raw_result.store_id = branch_store.id
    </select>

    <!--下面的SQL语句实现统计某段时间的浏览量-->
    <select id="browseStatisticsByDateRange" resultMap="browseStatisticsMap">
        SELECT product_id, product_name, store_id, store_name,  browse_num from(
        SELECT product_id,  store_id, count(*) as browse_num FROM
        (
        select * from browse where browse.browse_time <![CDATA[ >= ]]> "${begin_date}" and browse.browse_time <![CDATA[ <= ]]> "${end_date}"
        ) as browse_in_time_range
        group by product_id, store_id
        )as raw_result left join products on raw_result.product_id = products.id left join branch_store on store_id = branch_store.id;
    </select>
    <!--下面的SQL语句实现按照订单ID检索全部订单-->
    <select id="searchAllOrdersByKey" resultMap="OrderListObjectMap">
        select result.id, order_id,user_phone,product_id,product_name,store_id,store_name,amount,single_price,total_price, order_status,time_stamp from(
        select * from orders where order_id = ${key} order by `id` asc
        )as result
        left join products on products.id = result.product_id
        left join branch_store on result.store_id = branch_store.id;
    </select>
    <!--下面的SQL语句实现按照ID顺序检索全部订单-->
    <select id="selectAllOrdersOrderById" resultMap="OrderListObjectMap">
        select result.id, order_id,user_phone,product_id,product_name,store_id,store_name,amount,single_price,total_price, order_status,time_stamp from(
        select * from orders order by `id` asc
        )as result
        left join products on products.id = result.product_id
        left join branch_store on result.store_id = branch_store.id;
    </select>
    <!--下面的SQL语句实现向management_log中插入操作记录-->
    <select id="managementLog">
    INSERT INTO `lexiandb`.`management_log` (`staff_id`, `action`, `time_stamp`) VALUES (${staff_id}, "${action}", "${time_stamp}");
    </select>
    <!--下面的SQL语句实现按照id顺序从management_log中选取所有记录-->
    <select id="selectAllLogOrderById" resultMap="ManagementLogMap">
    SELECT management_log.id,staff_id,staff_name,`action`,time_stamp FROM lexiandb.management_log left join staff on management_log.staff_id = staff.id;
    </select>
    <!--下面的SQL语句实现按照管理人员id从management_log中选取相关记录-->
    <select id="selectAllLogById" resultMap="ManagementLogMap">
    SELECT temp.id,staff_id,staff_name,`action`,time_stamp FROM
    (select * from management_log WHERE staff_id = ${staff_id} )
    as temp left join staff on temp.staff_id = staff.id;
    </select>


    <!--/////////////////////////Xenia////////////////////////////////////////////-->
    <!--获取商品和门店的注册信息-->
    <select id="getProductsRegistedInStore" resultType="com.Patrick.dao.ProductToStore">
        SELECT *
        FROM products_by_store;
    </select>

    <!--删除门店和商品注册信息-->
    <delete id="deleteGSRecord">
        DELETE FROM products_by_store
        WHERE id = #{id};
    </delete>
    <!--注册新的门店和商品的信息-->
    <insert id="addGSRecord">
        INSERT INTO products_by_store (store_id, product_id, inventory, original_price, discount, product_status)
        VALUES (#{store_id}, #{product_id}, #{inventory}, #{original_price}, #{discount}, #{product_status});
    </insert>
    <!--更新门店和商品的对应信息-->

    <update id="updateGSRecord">
        UPDATE products_by_store
        SET store_id       = #{store_id}, product_id = #{product_id}, inventory = #{inventory},
            original_price = #{original_price}, discount = #{discount}, product_status = #{product_status}
        WHERE id = #{record_id}
    </update>
    <!--获取门店信息-->
    <resultMap id="branchStoreResult" type="com.Patrick.dao.BranchStore">
        <id column="id" property="store_id" jdbcType="INTEGER"/>
        <result column="store_name" property="store_name"/>
        <result column="store_tel" property="store_tel" jdbcType="VARCHAR"/>
        <result column="province" property="province" jdbcType="VARCHAR"/>
        <result column="city" property="city" jdbcType="VARCHAR"/>
        <result column="district" property="district" jdbcType="VARCHAR"/>
        <result column="store_address" property="store_address" jdbcType="VARCHAR"/>
        <result column="longitude" property="longitude" jdbcType="DOUBLE"/>
        <result column="latitude" property="latitude" jdbcType="DOUBLE"/>
        <result column="store_introduction" property="store_introduction" jdbcType="VARCHAR"/>
        <result column="store_start_time" property="store_start_time" jdbcType="TIME"/>
        <result column="store_close_time" property="store_close_time" jdbcType="TIME"/>
        <result column="store_status" property="store_status" jdbcType="INTEGER"/>

    </resultMap>
    <select id="getBranchStore" resultMap="branchStoreResult">
        SELECT *
        FROM branch_store;
    </select>

    <!--parameterType="com.Patrick.dao.BranchStore"-->
    <insert id="addStore">
        INSERT INTO branch_store
        (store_name,store_tel,province,city,district,store_address,longitude,latitude,store_introduction,store_start_time,store_close_time,store_status)
        VALUES
        (#{storeName},#{storeTel},#{storeProvince},#{storeCity},#{storeDistrict},#{storeAddress},#{storeLongitude},#{storeLatitude},#{storeIntroduction},#{openTime},#{closeTime},#{storeStatus});
        <!--<trim prefix="(" suffix=")" suffixOverrides=",">-->
        <!--&lt;!&ndash;<if test="id!=null">&ndash;&gt;-->
        <!--&lt;!&ndash;id,&ndash;&gt;-->
        <!--&lt;!&ndash;</if>&ndash;&gt;-->
        <!--<if test="store_name!=null">-->
        <!--store_name,-->
        <!--</if>-->
        <!--<if test="store_tel!=null">-->
        <!--store_tel,-->
        <!--</if>-->
        <!--<if test="province!=null">-->
        <!--province,-->
        <!--</if>-->
        <!--<if test="city!=null">-->
        <!--city,-->
        <!--</if>-->
        <!--<if test="district!=null">-->
        <!--district,-->
        <!--</if>-->
        <!--<if test="store_address!=null">-->
        <!--store_address,-->
        <!--</if>-->
        <!--<if test="longitude!=null">-->
        <!--longitude,-->
        <!--</if>-->
        <!--<if test="latitude!=null">-->
        <!--latitude,-->
        <!--</if>-->
        <!--<if test="store_introduction!=null">-->
        <!--store_introduction,-->
        <!--</if>-->
        <!--<if test="store_start_time!=null">-->
        <!--store_start_time,-->
        <!--</if>-->
        <!--<if test="store_close_time!=null">-->
        <!--store_close_time,-->
        <!--</if>-->
        <!--<if test="store_status!=null">-->
        <!--store_status,-->
        <!--</if>-->
        <!--</trim>-->
        <!--<trim prefix="values(" suffix=")" suffixOverrides=",">-->
        <!--<if test="id!=null">-->
        <!--#{id}-->
        <!--</if>-->
        <!--<if test="id!=null">-->
        <!--#{id},-->
        <!--</if>-->
        <!--<if test="store_name!=null">-->
        <!--#{store_name},-->
        <!--</if>-->
        <!--<if test="store_tel!=null">-->
        <!--#{store_tel},-->
        <!--</if>-->
        <!--<if test="province!=null">-->
        <!--#{province},-->
        <!--</if>-->
        <!--<if test="city!=null">-->
        <!--#{city},-->
        <!--</if>-->
        <!--<if test="district!=null">-->
        <!--#{district},-->
        <!--</if>-->
        <!--<if test="store_address!=null">-->
        <!--#{store_address},-->
        <!--</if>-->
        <!--<if test="longitude!=null">-->
        <!--#{longitude},-->
        <!--</if>-->
        <!--<if test="latitude!=null">-->
        <!--#{latitude},-->
        <!--</if>-->
        <!--<if test="store_introduction!=null">-->
        <!--#{store_introduction},-->
        <!--</if>-->
        <!--<if test="store_start_time!=null">-->
        <!--#{store_start_time},-->
        <!--</if>-->
        <!--<if test="store_close_time!=null">-->
        <!--#{store_close_time},-->
        <!--</if>-->
        <!--<if test="store_status!=null">-->
        <!--#{store_status},-->
        <!--</if>-->
        <!--</trim>-->
    </insert>

    <update id="updateStore" parameterType="com.Patrick.dao.BranchStore">
        UPDATE branch_store SET
        <if test="store_name!=null">
            #{store_name},
        </if>
        <if test="store_tel!=null">
            #{store_tel},
        </if>
        <if test="province!=null">
            #{province},
        </if>
        <if test="city!=null">
            #{city},
        </if>
        <if test="district!=null">
            #{district},
        </if>
        <if test="store_address!=null">
            #{store_address},
        </if>
        <if test="longitude!=null">
            #{longitude},
        </if>
        <if test="latitude!=null">
            #{latitude},
        </if>
        <if test="store_introduction!=null">
            #{store_introduction},
        </if>
        <if test="store_start_time!=null">
            #{store_start_time},
        </if>
        <if test="store_close_time!=null">
            #{store_close_time},
        </if>
        <if test="store_status!=null">
            #{store_status},
        </if>
        WHERE id=#{id}
    </update>

    <delete id="deleteStore" parameterType="java.util.List">
        -- 批量动态删除
        DELETE FROM branch_store
        WHERE id IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <!--处理特殊商品板块-->
    <insert id="addPSRecord">
        INSERT INTO special_products (sector_name, product_id) VALUES (#{sector_name}, #{product_id});
    </insert>
    <update id="updatePSRecord">
        UPDATE special_products
        SET sector_name = #{record_id}, product_id = #{product_id}
        WHERE id = #{record_id};
    </update>
    <delete id="deletePSRecord">
        DELETE FROM special_products
        WHERE id = #{id};
    </delete>
    <select id="getProductsForSector" resultType="com.Patrick.dao.SpecialProduct">
        SELECT *
        FROM special_products;
    </select>

    <!--添加特殊板块-->
    <insert id="addSector">
        INSERT INTO special_sectors (sector_name) VALUES (#{sector_name});
    </insert>
    <delete id="deleteSector1">
        DELETE FROM special_products
        WHERE sector_name = (SELECT special_sectors.sector_name
                             FROM special_sectors
                             WHERE special_sectors.id = #{id});
                             </delete>
    <delete id="deleteSector2">
        DELETE FROM special_sectors
        WHERE sector_name = #{sector_name};
    </delete>
    <select id="getSectors" resultType="com.Patrick.dao.SpecialSector">
        SELECT *
        FROM special_sectors;
    </select>
    <update id="updateSector1">
        UPDATE special_products SET special_products.sector_name = #{new_sector_name} WHERE special_products.sector_name in (SELECT special_sectors.sector_name FROM special_sectors WHERE special_sectors.id = #{id});
       </update>
    <update id="updateSector2">
        UPDATE special_sectors SET special_sectors.sector_name = #{new_sector_name} WHERE special_sectors.id = #{id};
    </update>

    <!--获取商品信息-->
    <select id="getProducts" resultType="com.Patrick.dao.Product">
        SELECT *
        FROM products;
    </select>

    <!--获取商品和类别信息的语句-->
    <!--单独获取两级的映射关系-->
    <select id="getcategoryMapper1" resultType="com.Patrick.dao.CategoryMapper1">
        SELECT *
        FROM categorymapper1_2;
    </select>
    <select id="getcategoryMapper2" resultType="com.Patrick.dao.CategoryMapper2">
        SELECT *
        FROM categorymapper2_3;
    </select>
    <!--获取单条由id得到的记录mapper23-->
    <select id="getcategoryMapper2ById" resultType="com.Patrick.dao.CategoryMapper2">
        select * from categorymapper2_3 where id=#{mapId};
    </select>
    <select id="getcategoryMapper2ByThirdCategory" resultType="com.Patrick.dao.CategoryMapper2">
 select * from categorymapper2_3 where son_category=#{third_category};
    </select>
    <!--利用second-category获取mapper12-->
    <select id="getcategoryMapper1Bysecond_category" resultType="com.Patrick.dao.CategoryMapper1">
        select * from categorymapper1_2 where son_category=#{second_category};
    </select>
    <!--按照更新需求逐条更新-->
    <update id="updateFirstCategory">
        update categorymapper1_2 set father_category=#{new_first_category} where father_category=#{old_first_category};
    </update>
    <update id="updateSecondCategoryInMap12">
        update categorymapper1_2 set son_category=#{new_second_category} where son_category=#{old_second_category};
    </update>
    <update id="updateSecondCategoryInMap23">
        update categorymapper2_3 set father_category=#{new_second_category} where son_category=#{old_third_category};
    </update>
    <update id="updateThirdCategory">
        update categorymapper2_3 set son_category=#{new_third_category} where son_category=#{old_third_category};
    </update>
    <insert id="addCategoryMap12">
        INSERT INTO categorymapper1_2 (father_category, son_category) VALUES (#{first_category}, #{second_category});
    </insert>
    <insert id="addCategoryMap23">
        INSERT INTO categorymapper2_3 (father_category, son_category) VALUES (#{second_category}, #{third_category});
    </insert>
    <select id="countSecondCategoryInMap23" resultType="int">
        SELECT count(son_category) from categorymapper2_3 WHERE father_category=#{second_category};
    </select>
    <select id="countFirstCategoryInMap12" resultType="int">
        SELECT count(son_category) from categorymapper1_2 WHERE father_category=#{first_category};
    </select>
    <delete id="deleteCategoryMap23">
        DELETE FROM categorymapper2_3 WHERE  father_category=#{second_category} and son_category=#{third_category};
    </delete>
    <delete id="deleteCategoryMap12">
        DELETE FROM categorymapper1_2 WHERE  father_category=#{first_category} and son_category=#{second_category};
    </delete>

    <!--<sql id="mapper12Column">-->
    <!--categorymapper1_2.id;-->
    <!--categorymapper1_2.father_category;-->
    <!--categorymapper1_2.son_category;-->
    <!--</sql>-->
    <!--<sql id="mapper23Column">-->
    <!--categorymapper2_3.id;-->
    <!--catgory_mapper2_3.father_category;-->
    <!--category_mapper2_3.son_category;-->
    <!--</sql>-->
    <!--<sql id="categoriesMapper">-->
    <!--category.map12id;-->
    <!--category.map23id;-->
    <!--category.first_category;-->
    <!--category.second_category;-->
    <!--category.third_category;-->
    <!--</sql>-->
    <!--<resultMap id="CategoriesMapperResult" type="com.Patrick.dao.CategoriesMapper">-->
    <!--<id column="map23id" property="second_id" jdbcType="INTEGER"/>-->
    <!--<result column="map12id" property="first_id" jdbcType="INTEGER"/>-->
    <!--<result column="first_category" property="firstCategory" jdbcType="VARCHAR"/>-->
    <!--<result column="second_category" property="secondCategory" jdbcType="VARCHAR"/>-->
    <!--<association property="categoryMapper1" javaType="com.Patrick.dao.CategoryMapper1">-->
    <!--<id column="id" property="id" javaType="INTEGER"/>-->
    <!--<result column="father_category" property="first_category" jdbcType="VARCHAR"/>-->
    <!--<result column="son_category" property="second_category" jdbcType="VARCHAR"/>-->
    <!--</association>-->
    <!--<association property="categoryMapper2" javaType="com.Patrick.dao.CategoryMapper2">-->
    <!--<id column="id" property="id" javaType="INTEGER"/>-->
    <!--<result column="father_category" property="first_category" jdbcType="VARCHAR"/>-->
    <!--<result column="son_category" property="second_category" jdbcType="VARCHAR"/>-->
    <!--</association>-->
    <!--</resultMap>-->
    <!--<select id="getCategoriesMappers" resultMap="CategoriesMapperResult">-->
    <!--SELECT <include refid="categoriesMapper"/>,-->
    <!--<include refid="mapper12Column"/>,-->
    <!--<include refid="mapper23Column"/> from categorymapper1_2,categorymapper2_3 left join on categorymapper1_2.son_category=categorymapper2_3.father_category;-->

    <!--</select>-->

    <!--处理商品-->
    <insert id="addProduct">
        insert into products(id,product_name,first_category,second_category,third_category,product_brief_introduction,product_detail,pic1_url,pic2_url,pic3_url,pic4_url,create_time,updatetime,unit)
         values (#{id},#{product_name},#{first_category},#{second_category},#{third_category},#{product_short_introduction},#{product_detail},#{url0},#{url1},#{url2},#{url3},#{current_time},#{update_time},#{unit});
    </insert>
    <delete id="deleteProduct">
        delete from products where id=#{product_id};
    </delete>
    <select id="getProductById" resultType="int">
        SELECT count(*) FROM products where id=#{id};
    </select>

    <!--/////////////////////////Xenia////////////////////////////////////////////-->

    <!-- 下面的SQL语句实现数据库信息向Staff类的传输（即数据库——>DAO层） -->
    <resultMap id="StaffMap" type="com.Patrick.dao.Staff">
        <!-- 下面"result"标签中，"column"与数据库表中的列名对应，"property"与DAO层定义的类中的属性对应（在这里指"Staff.java"），一般取同名 -->
        <id column="id" property="staff_id" jdbcType="INTEGER"/>
        <result column="role" property="role" jdbcType="INTEGER"/>
        <result column="staff_name" property="staff_name" jdbcType="VARCHAR"/>
        <result column="staff_password" property="staff_password" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="UserMap" type="com.Patrick.dao.User">
        <!-- 下面"result"标签中，"column"与数据库表中的列名对应，"property"与DAO层定义的类中的属性对应（在这里指"User.java"），一般取同名 -->
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_phone" property="user_phone" jdbcType="VARCHAR"/>
        <result column="user_name" property="user_name" jdbcType="VARCHAR"/>
        <result column="user_password" property="user_password" jdbcType="VARCHAR"/>
        <result column="money" property="money" jdbcType="DOUBLE"/>
        <result column="gender" property="gender" jdbcType="CHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="portrait_url" property="portrait_url" jdbcType="VARCHAR"/>
        <result column="last_login" property="last_login" jdbcType="TIMESTAMP"/>
        <result column="active" property="active" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="salesStatisticsMap" type="com.Patrick.dao.SalesStatistics">
        <!-- 下面"result"标签中，"column"与数据库表中的列名对应，"property"与DAO层定义的类中的属性对应（在这里指"SalesStatistics.java"），一般取同名 -->
        <result column="product_id" property="product_id" jdbcType="INTEGER"/>
        <result column="product_name" property="product_name" jdbcType="VARCHAR"/>
        <result column="store_id" property="store_id" jdbcType="INTEGER"/>
        <result column="store_name" property="store_name" jdbcType="VARCHAR"/>
        <result column="sales" property="sales" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="browseStatisticsMap" type="com.Patrick.dao.BrowseStatistics">
        <!-- 下面"result"标签中，"column"与数据库表中的列名对应，"property"与DAO层定义的类中的属性对应（在这里指"BrowseStatistics.java"），一般取同名 -->
        <result column="product_id" property="product_id" jdbcType="INTEGER"/>
        <result column="product_name" property="product_name" jdbcType="VARCHAR"/>
        <result column="store_id" property="store_id" jdbcType="INTEGER"/>
        <result column="store_name" property="store_name" jdbcType="VARCHAR"/>
        <result column="browse_num" property="browse_num" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="OrderListObjectMap" type="com.Patrick.dao.OrderListObject">
        <!-- 下面"result"标签中，"column"与数据库表中的列名对应，"property"与DAO层定义的类中的属性对应（在这里指"OrderListObject.java"），一般取同名 -->
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="order_id" property="order_id" jdbcType="INTEGER"/>
        <result column="user_phone" property="user_phone" jdbcType="VARCHAR"/>
        <result column="product_id" property="product_id" jdbcType="INTEGER"/>
        <result column="product_name" property="product_name" jdbcType="VARCHAR"/>
        <result column="store_id" property="store_id" jdbcType="INTEGER"/>
        <result column="store_name" property="store_name" jdbcType="VARCHAR"/>
        <result column="amount" property="amount" jdbcType="INTEGER"/>
        <result column="single_price" property="single_price" jdbcType="DOUBLE"/>
        <result column="total_price" property="total_price" jdbcType="DOUBLE"/>
        <result column="order_status" property="order_status" jdbcType="INTEGER"/>
        <result column="time_stamp" property="time_stamp" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="OrdersMap" type="com.Patrick.dao.Orders">
        <!-- 下面"result"标签中，"column"与数据库表中的列名对应，"property"与DAO层定义的类中的属性对应（在这里指"Orders.java"），一般取同名 -->
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="order_id" property="order_id" jdbcType="INTEGER"/>
        <result column="user_phone" property="user_phone" jdbcType="VARCHAR"/>
        <result column="product_id" property="product_id" jdbcType="INTEGER"/>
        <result column="store_id" property="store_id" jdbcType="INTEGER"/>
        <result column="amount" property="amount" jdbcType="INTEGER"/>
        <result column="single_price" property="single_price" jdbcType="DOUBLE"/>
        <result column="total_price" property="total_price" jdbcType="DOUBLE"/>
        <result column="order_status" property="order_status" jdbcType="INTEGER"/>
        <result column="time_stamp" property="time_stamp" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="ManagementLogMap" type="com.Patrick.dao.ManagementLog">
        <!-- 下面"result"标签中，"column"与数据库表中的列名对应，"property"与DAO层定义的类中的属性对应（在这里指"ManagementLog.java"），一般取同名 -->
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="staff_id" property="staff_id" jdbcType="INTEGER"/>
        <result column="staff_name" property="staff_name" jdbcType="VARCHAR"/>
        <result column="action" property="action" jdbcType="VARCHAR"/>
        <result column="time_stamp" property="time_stamp" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="SalesRankingMap" type="com.Patrick.dao.SalesRanking">
        <!-- 下面"result"标签中，"column"与数据库表中的列名对应，"property"与DAO层定义的类中的属性对应（在这里指"SalesRanking.java"），一般取同名 -->
        <result column="product_name" property="product_name" jdbcType="VARCHAR"/>
        <result column="turnover" property="turnover" jdbcType="DOUBLE"/>
    </resultMap>
</mapper>